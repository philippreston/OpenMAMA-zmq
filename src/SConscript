import glob
import os

env = Environment (
    WITH_MAMA_SOURCE = GetOption('with_mamasource'),
    WITH_MAMA        = GetOption('with_mamainstall'),
    WITH_LIBEVENT    = GetOption('with_libevent'),
    WITH_ZMQ         = GetOption('with_zmq'),
    TARGET_ARCH      = GetOption('target_arch'),
    BUILD_TYPE       = GetOption('build_type'),
    SHLIBPREFIX      = 'lib',
    suffix           = '',
    CPPPATH  =  [
                    './src',
                    '$WITH_MAMA_SOURCE/common/c_cpp/src/c',
                    '$WITH_MAMA_SOURCE/mama/c_cpp/src/c',
                    '$WITH_MAMA_SOURCE/mama/c_cpp/src/c/bridge/qpid',
                    '$WITH_MAMA/include',
                    '$WITH_LIBEVENT/include',
                    '$WITH_ZMQ/include',
                ],
)

# Windows has a few differences
if env['PLATFORM'] == "win32":
    if env['BUILD_TYPE'] == 'dynamic' or env['BUILD_TYPE'] == None:
        env.Append(
            CCFLAGS     = ['/MD','/Ox'],
            suffix      = 'md',
            )
    elif env['BUILD_TYPE'] == 'dynamic-debug':
        env.Append(
            CCFLAGS     = ['/MDd'],
            suffix      = 'mdd',
            )
    else:
        print "Unknown build type specified - exiting"
        Exit(1)

    zmq_ver_abbrev = int(env['MSVC_VERSION'][:4].replace ('.', ''))

    zmq_match = []
    zmq_lib = ''
    # 9.0 is earliest supported MSVC version for ZeroMQ
    while zmq_ver_abbrev >= 90 and len(zmq_match) == 0:
        zmq_match = glob.glob (env['WITH_ZMQ'] + '/lib/' + 'libzmq-v' +
            str(zmq_ver_abbrev) + '-mt-*.lib')
        zmq_ver_abbrev -= 10
    if len(zmq_match) > 0:
        # Should be two matches - second is debug
        if not env['BUILD_TYPE'].endswith('debug'):
            zmq_lib = os.path.basename(zmq_match[0]).replace ('.lib', '')
        else:
            zmq_lib = os.path.basename(zmq_match[1]).replace ('.lib', '')
    elif not env.GetOption('clean') and not env.GetOption('help'):
        print "Couldn't find any zeromq libraries! Check %s" % env['WITH_ZMQ']
        Exit (1)

    env.Append (
        LIBS     =  [
                        'libmamac' + env['suffix'],
                        'uuid',
                        'Ws2_32',
                        'libevent',
                        'libwombatcommon' + env['suffix'],
                        zmq_lib,
                    ],
        LIBPATH  =  [
                        '$WITH_MAMA/lib/' + env['BUILD_TYPE'],
                        '$WITH_ZMQ/lib',
                        '.',
                    ],
        CPPFLAGS =  [
                        '/DMAMA_DLL',
                    ],
    )
    env['CPPPATH'].append([
                              '$WITH_LIBEVENT/WIN32-Code',
                              '$WITH_LIBEVENT/',
                              '$WITH_MAMA_SOURCE/common/c_cpp/src/c/windows',
                          ])
    if 'x86_64' == env['TARGET_ARCH']:
        env['LIBPATH'].append(['$WITH_LIBEVENT/WIN32-Prj/x64/Release'])
    else:
        env['LIBPATH'].append(['$WITH_LIBEVENT/WIN32-Prj/Release'])

    if not env.GetOption('clean') and not env.GetOption('help'):
        conf = Configure (env)

        # Internal MAMA header
        if not conf.CheckCHeader ('bridge.h'):
            print 'Cannot find MAMA Source code - check --with-mamasource'
            Exit(1)

        # Scons preprocessor doesn't understand this file, so just check it
        # exists
        if not FindFile('event.h', env['WITH_LIBEVENT']):
            print 'Cannot find event.h - ensure libevent devel is installed'
            Exit(1)

        # Scons preprocessor doesn't understand this file, so just check it
        # exists
        if not FindFile('include/mama/mama.h', env['WITH_MAMA']):
            print 'Cannot find MAMA install directory - check --with-mamainstall'
            Exit(1)
        conf.Finish()
elif env['PLATFORM'] == "posix":
    env.Append (
        LIBS     =  [
                        'mama',
                        'uuid',
                        'zmq',
                        'event',
                        'wombatcommon',
                        'pthread',
                    ],
        LIBPATH  =  [
                        '$WITH_MAMA/lib',
                        '$WITH_MAMA/lib64',
                        '$WITH_LIBEVENT/lib',
                        '$WITH_LIBEVENT/lib64',
                        '$WITH_ZMQ/lib',
                        '$WITH_ZMQ/lib64',
                        '.',
                    ],
        CFLAGS   =  [
                        '-g',
                        '-O3'
                    ],
    )
    if not env.GetOption('clean') and not env.GetOption('help'):
        conf = Configure (env)
        if not conf.CheckCHeader ('bridge.h'):
            print 'Cannot find MAMA Source code - check --with-mamasource'
            Exit(1)

        if not conf.CheckCHeader ('uuid/uuid.h'):
            print 'Cannot find uuid - ensure uuid devel is installed'
            Exit(1)

        if not conf.CheckCHeader ('event.h'):
            print 'Cannot find event.h - ensure libevent devel is installed'
            Exit(1)

        if not conf.CheckLib ('mama'):
            print 'Cannot find MAMA install directory - check --with-mamainstall'
            Exit(1)
        conf.Finish()
    env.Program ('hammer', 'hammer.c')
    env.Program ('nail', 'nail.c')
    env.Program ('queuebench', 'queuebench.c')

elif env['PLATFORM'] == "darwin":
    env.Append (
        LIBS     =  [
                        'mama',
                        'zmq',
                        'event',
                        'wombatcommon',
                        'pthread',
                    ],
        LIBPATH  =  [
                        '$WITH_MAMA/lib',
                        '$WITH_LIBEVENT/lib',
                        '$WITH_ZMQ/lib',
                        '.',
                    ],
        CFLAGS   =  [
                        '-g',
                        '-O3'
                    ],
    )
    if not env.GetOption('clean') and not env.GetOption('help'):
        conf = Configure (env)
        if not conf.CheckCHeader ('bridge.h'):
            print 'Cannot find MAMA Source code - check --with-mamasource'
            Exit(1)

        if not conf.CheckCHeader ('uuid/uuid.h'):
            print 'Cannot find uuid - ensure uuid devel is installed'
            Exit(1)

        if not conf.CheckCHeader ('event.h'):
            print 'Cannot find event.h - ensure libevent devel is installed'
            Exit(1)

        if not conf.CheckLib ('mama'):
            print 'Cannot find MAMA install directory - check --with-mamainstall'
            Exit(1)
        conf.Finish()
    env.Program ('hammer', 'hammer.c')
    env.Program ('nail', 'nail.c')
    env.Program ('queuebench', 'queuebench.c')
else:
    print "Unsupported platform: %s" % env['PLATFORM']
    exit (1)

env.Command ("endpointpool.c",
                 "$WITH_MAMA_SOURCE/mama/c_cpp/src/c/bridge/qpid/endpointpool.c",
                 [
                     Copy("$TARGET", "$SOURCE"),
                 ]
)

libs = env.SharedLibrary (
    'mamazmqimpl' + env['suffix'],
    [
        'bridge.c',
        'endpointpool.c',
        'inbox.c',
        'io.c',
        'msg.c',
        'publisher.c',
        'queue.c',
        'subscription.c',
        'timer.c',
        'transport.c'
    ]
)

# Install the library to the top directory
env.Command ("../../" + str(libs[0]),
             str(libs[0]),
             [
                 Copy("$TARGET", "$SOURCE"),
             ]
)

